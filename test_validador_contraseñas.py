#!/usr/bin/env python3
"""
Suite de Pruebas Unitarias para Validador de Contrase√±as
========================================================

Este m√≥dulo contiene una suite completa de pruebas unitarias para verificar
el correcto funcionamiento del validador de contrase√±as. Incluye:

- Pruebas b√°sicas de funcionalidad
- Pruebas de casos l√≠mite (edge cases)
- Pruebas parametrizadas para m√∫ltiples escenarios
- Generaci√≥n autom√°tica de reportes detallados en formato TXT y XML

Las pruebas se ejecutan usando pytest y generan reportes con timestamp
para facilitar el seguimiento y la documentaci√≥n de resultados.

Autor: Sistema de Pruebas de Validaci√≥n
Versi√≥n: 1.0
"""

# Importaciones necesarias
import pytest  # Framework de testing para Python
from validador_contrase√±as import validar_contrase√±a  # Funci√≥n a testear


class TestValidadorContrase√±as:
    """
    Suite de pruebas unitarias para el validador de contrase√±as.
    
    Verifica que las contrase√±as cumplan con los criterios de seguridad:
    - M√≠nimo 8 caracteres
    - Al menos una letra may√∫scula
    - Al menos una letra min√∫scula
    - Al menos un n√∫mero
    """

    def test_contrase√±a_valida_minima(self):
        """Prueba contrase√±a v√°lida con requisitos m√≠nimos."""
        assert validar_contrase√±a("Password1") is True

    def test_contrase√±a_valida_compleja(self):
        """Prueba contrase√±a v√°lida m√°s compleja."""
        assert validar_contrase√±a("MiContrase√±aSegura123") is True

    def test_contrase√±a_sin_mayuscula(self):
        """Prueba contrase√±a sin letra may√∫scula."""
        assert validar_contrase√±a("password123") is False

    def test_contrase√±a_sin_minuscula(self):
        """Prueba contrase√±a sin letra min√∫scula."""
        assert validar_contrase√±a("PASSWORD123") is False

    def test_contrase√±a_sin_numero(self):
        """Prueba contrase√±a sin n√∫mero."""
        assert validar_contrase√±a("Password") is False

    def test_contrase√±a_muy_corta(self):
        """Prueba contrase√±a con menos de 8 caracteres."""
        assert validar_contrase√±a("Pass1") is False

    def test_contrase√±a_exactamente_8_caracteres(self):
        """Prueba contrase√±a con exactamente 8 caracteres v√°lidos."""
        assert validar_contrase√±a("PassworD1") is True

    def test_contrase√±a_vacia(self):
        """Prueba contrase√±a vac√≠a."""
        assert validar_contrase√±a("") is False

    def test_contrase√±a_solo_espacios(self):
        """Prueba contrase√±a con solo espacios."""
        assert validar_contrase√±a("        ") is False

    def test_contrase√±a_con_caracteres_especiales(self):
        """Prueba contrase√±a v√°lida con caracteres especiales."""
        assert validar_contrase√±a("Password123!@#") is True

    def test_contrase√±a_con_espacios_valida(self):
        """Prueba contrase√±a v√°lida que incluye espacios."""
        assert validar_contrase√±a("Mi Password 123") is True

    def test_contrase√±a_unicode(self):
        """Prueba contrase√±a con caracteres unicode."""
        assert validar_contrase√±a("Contrase√±a123") is True

    # Decorador pytest.mark.parametrize permite ejecutar la misma prueba
    # con diferentes sets de datos, evitando duplicaci√≥n de c√≥digo
    @pytest.mark.parametrize("contrase√±a,esperado", [
        # Casos v√°lidos: cumplen todos los criterios
        ("ValidPassword1", True),      # Caso b√°sico v√°lido
        ("AnotherGood2", True),        # Otra combinaci√≥n v√°lida
        ("SuperSecure99", True),       # Con m√∫ltiples n√∫meros
        
        # Casos inv√°lidos: fallan en diferentes criterios
        ("invalid", False),            # Sin may√∫sculas ni n√∫meros
        ("INVALID1", False),           # Sin min√∫sculas
        ("Invalid", False),            # Sin n√∫meros
        ("123456789", False),          # Solo n√∫meros
        ("", False),                   # Cadena vac√≠a
        
        # Casos de longitud progresiva (boundary testing)
        ("A1", False),                 # 2 caracteres
        ("Aa1", False),                # 3 caracteres
        ("Aa12", False),               # 4 caracteres
        ("Aa123", False),              # 5 caracteres
        ("Aa1234", False),             # 6 caracteres
        ("Aa12345", False),            # 7 caracteres
        ("Aa123456", True),            # 8 caracteres (l√≠mite v√°lido)
    ])
    def test_contrase√±as_parametrizadas(self, contrase√±a, esperado):
        """
        Pruebas parametrizadas con m√∫ltiples casos.
        
        Esta funci√≥n se ejecuta una vez por cada tupla en la lista del decorador,
        permitiendo probar m√∫ltiples escenarios de forma eficiente.
        """
        assert validar_contrase√±a(contrase√±a) is esperado

    def test_contrase√±a_muy_larga(self):
        """Prueba contrase√±a extremadamente larga."""
        contrase√±a_larga = "A" * 100 + "a" * 100 + "1" * 100
        assert validar_contrase√±a(contrase√±a_larga) is True

    def test_tipo_entrada_invalido(self):
        """Prueba manejo de tipos de entrada inv√°lidos."""
        with pytest.raises(TypeError):
            validar_contrase√±a(None)
        
        with pytest.raises(TypeError):
            validar_contrase√±a(123)
        
        with pytest.raises(TypeError):
            validar_contrase√±a(['p', 'a', 's', 's'])

    def test_multiples_mayusculas_minusculas_numeros(self):
        """Prueba contrase√±a con m√∫ltiples may√∫sculas, min√∫sculas y n√∫meros."""
        assert validar_contrase√±a("ABCDabcd1234") is True

    def test_contrase√±a_solo_mayusculas_y_numeros(self):
        """Prueba contrase√±a con solo may√∫sculas y n√∫meros."""
        assert validar_contrase√±a("ABCD1234") is False

    def test_contrase√±a_solo_minusculas_y_numeros(self):
        """Prueba contrase√±a con solo min√∫sculas y n√∫meros."""
        assert validar_contrase√±a("abcd1234") is False

    def test_contrase√±a_solo_letras_mayusculas_y_minusculas(self):
        """Prueba contrase√±a con solo letras sin n√∫meros."""
        assert validar_contrase√±a("ABCDabcdEFGH") is False


class TestCasosEspeciales:
    """Pruebas para casos especiales y edge cases."""

    def test_contrase√±a_con_salto_de_linea(self):
        """Prueba contrase√±a que incluye salto de l√≠nea."""
        assert validar_contrase√±a("Password\n123") is True

    def test_contrase√±a_con_tabulacion(self):
        """Prueba contrase√±a que incluye tabulaci√≥n."""
        assert validar_contrase√±a("Password\t123") is True

    def test_contrase√±a_numeros_unicode(self):
        """Prueba contrase√±a con n√∫meros unicode."""
        assert validar_contrase√±a("Password‚ë†‚ë°‚ë¢") is True

    def test_contrase√±a_emojis(self):
        """Prueba contrase√±a que incluye emojis."""
        assert validar_contrase√±a("Password123üòÄ") is True


# Bloque de ejecuci√≥n principal para generaci√≥n autom√°tica de reportes
# Solo se ejecuta cuando el archivo se ejecuta directamente
if __name__ == "__main__":
    # Importaciones adicionales para el sistema de reportes
    import sys  # Para manipulaci√≥n de stdout y argumentos del sistema
    from datetime import datetime  # Para generar timestamps √∫nicos
    
    # Generar nombre de archivo √∫nico con timestamp
    # Formato: YYYYMMDD_HHMMSS para ordenamiento cronol√≥gico
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    resultado_archivo = f"resultados_pruebas_{timestamp}.txt"
    
    # Configurar argumentos para pytest con opciones detalladas
    args = [
        __file__,                                        # Archivo de pruebas a ejecutar
        "-v",                                           # Modo verbose: mostrar cada test
        "--tb=long",                                    # Traceback detallado en caso de errores
        f"--junit-xml=junit_report_{timestamp}.xml",    # Generar reporte XML para CI/CD
        "--capture=no",                                 # No capturar prints durante ejecuci√≥n
        "-s"                                           # No capturar salida est√°ndar
    ]
    
    # Crear y abrir archivo de reporte con codificaci√≥n UTF-8 para caracteres especiales
    with open(resultado_archivo, 'w', encoding='utf-8') as f:
        # Escribir cabecera formateada del reporte
        f.write("="*80 + "\n")
        f.write("REPORTE DETALLADO DE PRUEBAS UNITARIAS\n")
        f.write("Validador de Contrase√±as\n")
        f.write(f"Fecha de ejecuci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("="*80 + "\n\n")
        
        # Guardar referencia al stdout original para restaurarlo despu√©s
        stdout_original = sys.stdout
        
        # Clase personalizada para capturar salida en archivo Y mostrar en consola
        # Implementa patr√≥n "Tee" (como comando Unix tee)
        class TeeOutput:
            """
            Clase que redirige la salida tanto al archivo como a la consola.
            
            Implementa los m√©todos necesarios para ser compatible con sys.stdout
            y permite que pytest funcione correctamente mientras captura la salida.
            """
            def __init__(self, file_obj, original_stdout):
                self.file = file_obj           # Archivo donde escribir
                self.stdout = original_stdout  # Stdout original (consola)
            
            def write(self, text):
                """Escribir texto tanto en archivo como en consola"""
                self.file.write(text)
                self.stdout.write(text)
            
            def flush(self):
                """Forzar escritura de buffers"""
                self.file.flush()
                self.stdout.flush()
            
            def isatty(self):
                """Verificar si es un terminal interactivo (requerido por pytest)"""
                return self.stdout.isatty()
            
            def __getattr__(self, name):
                """Delegar cualquier otro m√©todo al stdout original"""
                return getattr(self.stdout, name)
        
        # Redirigir stdout para capturar la salida de pytest
        sys.stdout = TeeOutput(f, stdout_original)
        
        try:
            # Ejecutar todas las pruebas usando pytest.main()
            # pytest.main() devuelve 0 si todas las pruebas pasaron, diferente de 0 si hubo fallos
            codigo_salida = pytest.main(args)
            
            # Escribir secci√≥n de resumen al final del reporte
            f.write("\n" + "="*80 + "\n")
            f.write("RESUMEN DE EJECUCI√ìN\n")
            f.write("="*80 + "\n")
            
            # Interpretar c√≥digo de salida y escribir mensaje apropiado
            if codigo_salida == 0:
                f.write("‚úì TODAS LAS PRUEBAS PASARON EXITOSAMENTE\n")
            else:
                f.write("‚úó ALGUNAS PRUEBAS FALLARON\n")
            
            # Informaci√≥n adicional del reporte
            f.write(f"C√≥digo de salida: {codigo_salida}\n")
            f.write(f"Reporte guardado en: {resultado_archivo}\n")
            
        finally:
            # IMPORTANTE: Restaurar stdout original para evitar problemas
            # Este bloque se ejecuta siempre, incluso si hay excepciones
            sys.stdout = stdout_original
    
    # Mostrar informaci√≥n final al usuario sobre los archivos generados
    print(f"\nüìÑ Reporte detallado guardado en: {resultado_archivo}")
    print(f"üìä Reporte XML guardado en: junit_report_{timestamp}.xml")